<chapter id="building" xreflabel="Building an EC2 Image">


<title>Building an EC2 Image</title>

<section id="building-ec2-image" xreflabel="Building an EC2 Image">
<title>Overview of Creating your first EC2 Image using Rocks</title>

<para>

This section walks through the steps of creating an EC2 Image using Rocks. 
It is based on the included <emphasis>Development Appliance</emphasis> included in
the roll. Users should take this appliance as a guide for building their own
EC2 appliances. The included development appliance, when run either on the local Rocks cluster
or in EC2 can be used to build Rolls. It also includes a working (but unpopulated) Rocks database. 
</para>

<para>
This example assumes that you have the KVM roll (required) and VM-container (Called VM-container-0-0) in your development cluster. The steps are then. It also assumes that root's .ec2 directory
has been properly populated with keys and certificates.
<orderedlist>

<listitem>
<para>
Build a local development appliance (the host must have associated an attribute ec2_enable set to true)
</para>

</listitem>

<listitem>
<para>
Bundle the appliance using the command <computeroutput>rocks create ec2 bundle &lt;hostname&gt;
</computeroutput>
</para>
</listitem>

<listitem>
<para>
Upload the Bundled appliance using the command <computeroutput>rocks upload ec2 bundle &lt;hostname&gt; &lt;bucketname&gt;</computeroutput>
</para>
</listitem>

<listitem>
<para>
Register the bundled appliance using <computeroutput>ec2-register-image</computeroutput> to
get a valid AMI (Amazon Machine Image) Identifier
</para>
</listitem>

<listitem>
<para>
Run the AMI using <computeroutput>ec2-run-instances</computeroutput>
</para>
</listitem>

</orderedlist>
</para>

<para>
The final step of running and EC2 instance can accomplished from the command line or from
the Amazon web console
</para>

</section>

<section id="walkthrough-building-ec2-image" xreflabel="Walkthrough Building an EC2 Image">
<title>Walkthrough of Creating your first EC2 Image using Rocks</title>
<orderedlist>
<listitem>
<para>
Add and build a virtual development appliance
<screen>
# rocks add host vm vm-container-0-0 membership="Development Appliance"
added VM devel-server-0-0-0 on physical node vm-container-0-0
# rocks set host boot action=install devel-server-0-0-0
# rocks set host attr ec2_enable true
# rocks start host devel-server-0-0-0
</screen>

<tip>
<para>
You must wait for the development server to complete its installation. When complete, you will
want to shut it down. via
</para>

<screen>
# ssh devel-server-0-0-0 "shutdown -h now"
</screen>
</tip>
</para>
</listitem>

<listitem>
<para>
Bundle the image. Because of the way EC2's bundling software works, there must be sufficient disk
space on the VM-container for two copies of the disk contents.
<screen>
# rocks create ec2 bundle devel-server-0-0-0 imagename=devel-server-0-0-0
Creating output directory
Mounting files systems 
Copying credentials
Removing root password
Creating the script
Running the bundle script, this step might take 10-20 minutes
bundling ...
Copying / into image file /mnt/ec2image/devel-server-0-0-0
.
.
.
</screen>
</para>
<para> 
When complete the output of creating the bundle will look similar to 
<screen>
Created devel-server-0-0-0.part.096
Created devel-server-0-0-0.part.097
Created devel-server-0-0-0.part.098
Created devel-server-0-0-0.part.099
Created devel-server-0-0-0.part.100
Generating digests for each part ...
Digests generated.
Creating bundle manifest ...
ec2-bundle-vol complete
</screen>
</para>
</listitem>

<listitem>
<para> <emphasis>Upload the image into Amazon S3</emphasis>. The bundled image must be
uploaded into Amazon's S3 (Simple Storage Service).  You must choose an S3 bucket name into
which the bundled parts are stored.
<screen>
# rocks upload ec2 bundle devel-server-0-0-0 s3bucket=my-test imagename=devel-server-0-0-0 
Copying credential directory
Creating the script
Running the upload script. this step may take 30-60 minutes
depending on your connection to S3
uploading ....
Uploading bundle image parts to https://s3.amazonaws.com:443/my-test ...
Uploaded devel-server-0-0-0.part.000 to https://s3.amazonaws.com:443/my-test/devel-server-0-0-0.part000. 
Uploaded devel-server-0-0-0.part.001 to https://s3.amazonaws.com:443/my-test/devel-server-0-0-0.part001. 
.
.
.
Uploaded devel-server-0-0-0.part.100 to https://s3.amazonaws.com:443/my-test/devel-server-0-0-0.part100. 
Uploading manifest ...
Uploaded manifest to https://s3.amazonaws.com:443/my-test/devel-server-0-0-0.manifest.xml 
Bundle upload completed..
</screen>
</para>
<tip>
<para> S3 bucket names must be all lower case. See S3 documentation. 
</para>
</tip>
<tip>
<para> S3 uploads are not 100% reliable. If the upload fails, simply re-run the 
<computeroutput> rocks upload ec2 bundle</computeroutput> command.
</para>
</tip>
</listitem>

<listitem>
<para> Register the image with Amazon EC2. The following will give you an Amazon
AMI. You must use this in thee next step
<screen>
export EC2_PRIVATE_KEY=/root/.ec2/pk.pem
export EC2_CERT=/root/.ec2/cert.pem 
# ec2-register my-test/devel-server-0-0-0.manifest.xml -n "rocks test server"
IMAGE   ami-6b608d08
</screen>
</para>
</listitem>


<listitem>
<para> Start an Amazon AMI. The -k command must be the name of a register Amazon keypair 
<screen>
export EC2_PRIVATE_KEY=/root/.ec2/pk.pem
export EC2_CERT=/root/.ec2/cert.pem 
# ec2-run-instances -t m1.large ami-6b608d08 -k phil-aws
RESERVATION     r-6cee7f04      572535418485    default
INSTANCE        i-7c516914      ami-6b608d08                    pending phil-aws        0         m1.large 2010-01-19T19:01:38+0000        us-east-1b      aki-9800e5f1                    monitoring-disabled

#ec2-describe-instances
RESERVATION     r-6cee7f04      572535418485    default
INSTANCE        i-7c516914      ami-6b608d08                    pending phil-aws        0         m1.large 2010-01-19T19:01:38+0000        us-east-1b      aki-9800e5f1                    monitoring-disabled

[root@landphil ec2-commands]# ec2-describe-instances
RESERVATION     r-6cee7f04      572535418485    default
INSTANCE        i-7c516914      ami-6b608d02                    pending phil-aws        0         m1.large 2010-01-19T19:01:38+0000        us-east-1b      aki-9800e5f1                    monitoring-disabled
.
.
.

[root@landphil ec2-commands]# ec2-describe-instances
RESERVATION     r-6cee7f04      572535418485    default
INSTANCE        i-7c516914      ami-6b608d08    ec2-67-202-16-68.compute-1.amazonaws.com        domU-12-31-39-09-BC-82.compute-1.internal  running phil-aws        0               m1.large        2010-01-19T19:01:38+0000   us-east-1b      aki-9800e5f1                    monitoring-disabled
</screen>
</para>

<tip>
<para> EC2 start up is 100% reliable  sometimes fail with "pending" changing to "terminated." 
If an image fails to boot properly, simply try again. If the problem persists, try re-uploading (<computeroutput> rocks upload ec2 bundle</computeroutput>) the bundled image to a new S3 bucket. Register the newly uploaded bundle  to create a new AMI and try again.
</para>
</tip>

</listitem>


<listitem>
<para> Login into the runnning instance. IP address is from the above output. In this instance, the file phil-gpg is the private key of the "phil-aws" keypair registered with Amazon. You MUST specifify a registered key pair to root access to the running image.
<screen>

# ssh-agent $SHELL              
# ssh-add phil-gpg 
Identity added: phil-gpg (phil-gpg)
# ssh ec2-67-202-16-68.compute-1.amazonaws.com
Warning: Permanently added 'ec2-67-202-16-68.compute-1.amazonaws.com' (RSA) to the list of known hosts.
Last login: Fri Jan 15 16:39:47 2010 from landphil.local
Rocks 5.2 (Chimichanga)
Profile built 20:15 14-Jan-2010

Kickstarted 20:32 14-Jan-2010
EC2-enabled Client
Rocks 5.2 Development Server
[root@domU-12-31-39-09-BC-82 ~]# 
.
.
.

[root@domU-12-31-39-09-BC-82 ~]# shutdown -h now
</screen>
</para>
<warning>
<para>
Do NOT forget to shut down a running EC2 instance. Your credit card is charged for the time your 
machine is on irrespective of actual use. 
</para>
</warning>
</listitem>
</orderedlist>

</section>


<section id="ebs-ec2-image" xreflabel="Walkthrough Building an EC2 Image">
<title>Creating EBS based EC2 Image using Rocks</title>
<para>
To create an EBS based EC2 Image you should follow the step 1 of the previous 
section to create a virtual development appliance.
</para>

<orderedlist>
<listitem>
<para> <emphasis>Upload the image into Amazon EBS</emphasis>. The image must be
uploaded into Amazon's EBS (Elastic Block Storage). To do so you need to place you 
ssh key inside the credentials directory.  The default image size is 10Gb. A different 
size can be specified with <emphasis>size=X</emphasis> option. X is an integer multiple of 10.
<screen>
# cp /path/to/clem.pem /root/.ec2/clem.pem
# chmod 640 /root/.ec2/clem.pem
# rocks upload ec2 bundlefast devel-server-0-0-0 clem size=30
Launching receiver instance and new EC2 compute-0-0-0 instance ...
. . . . . . . . . . . . . 
New compute-0-0-0 instance started. Public DNS:  ec2-54-242-13-118.compute-1.amazonaws.com  Instance ID:  i-e17ffc90
. . . . . . . . . . . . . 
New compute-0-0-0 instance stopped
Detaching volume from new instance
. . 
Volume sucesfully detached (vol-e9ff5d97)
Check if receiver instance is ready
. Attaching dump volume to receiver instance
Volume :vol-e9ff5d97 attached
. . . New volume :vol-e9ff5d97 has been successfully attached to instance i-e37ffc92
...Instance is ready to accept SSH connection
Mounting local file systems
/dev/mapper/loop0p1
Running the upload script this step may take up to 10 minutes
SendRate(Mb/s)	RTT(ms)	CWnd	PktSndPeriod(us)	RecvACK	RecvNAK
111.104		91.144	9954	95			11	1199
87.7814		85.756	11800	93.5776			11	49
89.0065		79.016	14081	77.0038			26	0
122.41		78.785	11602	125			79	14
....

Reattching volume vol-e9ff5d97to new instance
. . . . . . . . . . . . . . . . 
New volume :vol-e9ff5d97 has been successfully re attached to instance i-e17ffc90
Terminating receiver instance
</screen>
</para>
<tip>
<para> After this step if you login in the AWS console you should see a terminated instance
(which is the receiver instance) and a stopped instance (which is the uploaded instance).
</para>
</tip>
</listitem>


<listitem>
<para><emphasis>Check the instance</emphasis>. Start the stopped instance, login to it and verify that everything is 
as expected. After that you can poweroff the instance.
<screen>
export EC2_PRIVATE_KEY=/root/.ec2/pk.pem
export EC2_CERT=/root/.ec2/cert.pem 
# ec2-describe-instances
RESERVATION	r-7a575402	277989259740	default
INSTANCE	i-3b3cbe4a	ami-e4f54a8d			stopped	clem	0		t1.micro	2013-01-08T19:41:13+0000	us-east-1a	aki-88aa75e1	ari-e3c1218a		monitoring-disabled					ebs					paravirtual	xen	sg-0558ba6c	default	false	
BLOCKDEVICE	/dev/sda1	vol-ced17cb0	2013-01-08T19:53:57.000Z	false		
RESERVATION	r-7457540c	277989259740	default
INSTANCE	i-253cbe54	ami-e4f54a8d			terminated	clem	0		t1.micro	2013-01-08T19:41:14+0000	us-east-1a	aki-88aa75e1	ari-e3c1218a		monitoring-disabled					ebs					paravirtual	xen		sg-0558ba6c	default	false	

# ec2-start-instances i-3b3cbe4a
[...]

# ec2-describe-instances
RESERVATION	r-7a575402	277989259740	default
INSTANCE	i-3b3cbe4a	ami-e4f54a8d	ec2-107-20-118-103.compute-1.amazonaws.com	domU-12-31-39-0C-5C-47.compute-1.internal	running	clem	0t1.micro	2013-01-08T19:58:40+0000	us-east-1a	aki-88aa75e1	ari-e3c1218a		monitoring-disabled	107.20.118.103	10.215.95.181	ebs					paravirtual	xen		sg-0558ba6c	default	false	
BLOCKDEVICE	/dev/sda1	vol-ced17cb0	2013-01-08T19:53:57.000Z	false		
RESERVATION	r-7457540c	277989259740	default
INSTANCE	i-253cbe54	ami-e4f54a8d			terminated	clem	0		t1.micro	2013-01-08T19:41:14+0000	us-east-1a	aki-88aa75e1	ari-e3c1218a		monitoring-disabled					ebs					paravirtual	xen		sg-0558ba6c	default	false	
[...]

# ssh -i /root/.ec2/clem.pem root@ec2-107-20-118-103.compute-1.amazonaws.com
Last login: Mon Jan  7 17:45:53 2013 from calit2-119-23.local
Rocks Compute Node
Rocks 6.1 (Emerald Boa)
Profile built 17:16 07-Jan-2013

Kickstarted 17:42 07-Jan-2013
EC2-enabled Client
[root@domU-12-31-39-0C-5C-47 ~]#  poweroff
</screen>
</para>

<warning>
<para>
Do NOT forget to shut down a running EC2 instance. Your credit card is charged for the time your 
machine is on irrespective of actual use (stopped or running instance). 
If you simply poweroff the machine your EBS volume will be kept allocated.
You need to "terminte" the instance to destroy the EBS.
</para>
</warning>

</listitem>

<listitem>
<para><emphasis>Register EBS-based AMI</emphasis>. If you are satisfied with your image you can register the EBS as 
a new AMI. To create an AMI first you have to snapshot the EBS (which 
is going to take approximately 5/10min) and then you can register 
the snapshot.
<screen>
export EC2_PRIVATE_KEY=/root/.ec2/pk.pem
export EC2_CERT=/root/.ec2/cert.pem 
# ec2-create-snapshot -d "tobedeleted"  vol-ced17cb0
SNAPSHOT	snap-13d7105c	vol-ced17cb0	pending	2013-01-08T20:07:50+0000		277989259740	10	tobedeleted

[...]

# ec2-register -a x86_64 -s snap-13d7105c -n tobedelete_test --kernel aki-88aa75e1
MAGE	ami-130a837a
</screen>
</para>
<tip>
<para>
Options <emphasis>-a</emphasis> and <emphasis>--kernel</emphasis> are required to create 64 bit image. 
If not specified, a 32 bit image will be created. 
By default, <emphasis>ec2-create-snapshot</emphasis>  and <emphasis>ec2-register</emphasis>
use <emphasis>us-east-1</emphasis> region. When a different region is specified via a command line option
the kernel id will need to be updated to one that AWS supports for that region (check AWS documentation for
<ulink url="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">available kernels</ulink>)
</para>
</tip>
<tip>
<para>
Please execute commands with <emphasis>-help</emphasis> option for more info on other available options. 
</para>
</tip>

</listitem>

</orderedlist>

</section>
</chapter>

