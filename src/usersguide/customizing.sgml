<chapter id="customizing" xreflabel="Customizing the EC2 Roll">

<title>Customizing the EC2 Roll</title>

<section id="customizing-ec2" xreflabel="Customizing EC2">
<title>Customizing the EC2 Roll</title>

<para>
The intent of the EC2 is to be able to build Rocks appliances and run them
in EC2. This gives the user complete reproducibility of image contents. From the Rocks point
of view, EC2 demands certain concessions and the Roll makes adjustments in the appliance
definition
</para>
<para>
Some of the requirements put on on EC2-compatible images
<itemizedlist>
<listitem>
<para> 
Single Partition. No larger than 10GB.
</para>
</listitem>

<listitem>
<para> 
DHCP Network Configuration. One interface only.
</para>
</listitem>

<listitem>
<para> 
Only specific Amazon-accepted Kernels
</para>
</listitem>

<listitem>
<para> 
EC2-specific mechanism to load authorized keys
</para>
</listitem>

</itemizedlist>
</para>

<para>
To enable an appliance to comply with the EC2-defined paramaters the Rocks
attribute <computeroutput>ec2_enable</computeroutput> must be set to include the
modifications to the kickstarted image for compatibility with EC2. The output below shows
that ec2 is enabled for the devel-server appliance (Development Server Rocks Memberhip). 
Every devel-server kickstarted will be enabled for ec2. 
<screen>
# rock list appliance attr
APPLIANCE     ATTR          VALUE
frontend:     managed       false
compute:      managed       true 
devel-server: ec2_enable    true 
</screen>
</para>

<para>
The ec2_enable attribute includes sections of the graph that will make the appropriate 
modifications. An ec2-enabled appliance runs just fine on a Rocks cluster. This enables
local testing of appliance definitions before uploading a bundled image into EC2.
</para>

<tip>
<para>
You can make any appliance ec2-compatible by setting the ec2_enable attribute and
rebuilding the vm on the local cluster. However, some software in your appliance may
be dependent on your cluster headnode.
</para>
</tip>
</section>
</chapter>

